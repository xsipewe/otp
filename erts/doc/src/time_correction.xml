<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd">

<chapter>
  <header>
    <copyright>
      <year>1999</year><year>2014</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      The contents of this file are subject to the Erlang Public License,
      Version 1.1, (the "License"); you may not use this file except in
      compliance with the License. You should have received a copy of the
      Erlang Public License along with this software. If not, it can be
      retrieved online at http://www.erlang.org/.

      Software distributed under the License is distributed on an "AS IS"
      basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
      the License for the specific language governing rights and limitations
      under the License.

    </legalnotice>

    <title>Time and Time Correction in Erlang</title>
    <prepared>Patrik Nyblom</prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2013-08-28</date>
    <rev>PA1</rev>
    <file>time_correction.xml</file>
  </header>
  <p>Time is vital to an Erlang program and, more importantly, <em>correct</em>
  time is vital to an Erlang program. As Erlang is a language with
  soft real-time properties and we can express
  time in our programs, the Virtual Machine and the language must be
  careful about what is considered a correct time and
  how time functions behave.</p>

  <p>In the beginning, Erlang was designed assuming that the wall
  clock time in the system showed a monotonic time moving forward at
  the same pace as the definition of time. It more or less meant
  that an atomic clock (or a better time source) was expected to be
  attached to your hardware and that the hardware was expected to be
  locked away from any human tinkering forever.
  While this can be a compelling thought, it is never the case.</p>

  <p>A "normal" modern computer cannot keep time, not on itself and
  not unless you have a chip-level atomic clock wired to
  it. Time, as perceived by your computer, must normally be corrected.
  Hence the Network Time Protocol (NTP), together with the <c>ntpd</c>
  process, does its best to keep your computers time in sync with
  the correct time. Between NTP corrections, usually a
  less potent time-keeper than an atomic clock is used.</p>

  <p>However, NTP is not fail-safe. The NTP server can be unavailable,
  <c>ntp.conf</c> can be wrongly configured, or your computer can
  sometimes be disconnected from Internet. Furthermore, you can have
  a user (or even a system administrator) who thinks the correct
  way to handle Daylight Saving Time is to adjust the clock one
  hour two times a year (which is not the correct way to do
  it). To complicate things further, this user fetched your
  software from Internet and has not considered what
  the correct time is as perceived by a computer. The user does
  not care about keeping the wall clock time in sync with the correct
  time. The user expects your program to have unlimited knowledge
  about the time.</p>

  <p>Most programmers also expect time to be reliable, at least until
  they realize that the wall clock time on their workstation is off by
  a minute. Then they set it to the correct time, but most probably
  not in a smooth way.</p>

  <p>The number of problems that arise when you expect the wall clock
  time on the system to be always correct can be immense. Erlang
  therefore
  introduced the "corrected estimate of time", or the "time
  correction", many years ago. The time correction relies on the fact
  that most Operating Systems (OSs) have some kind of monotonic clock,
  either a real-time extension or some built-in "tick counter", which
  is independent of the wall clock settings. This counter can have
  microsecond resolution or much less, but it has a drift
  that cannot be ignored.</p>

  <p>So, we have this monotonic ticking and we have the wall clock
  time. Two unreliable times that together can give us an estimate of
  a wall clock time that does not jump around and that
  monotonically moves forward. If the tick counter has a high
  resolution, this is fairly easy to do. If the counter has a low
  resolution, it is more expensive, but can still be done down to
  frequencies of 50-60 Hz (of the tick counter).</p>

  <p>The corrected time is the best approximation of an atomic
  clock that is available on the computer. We want it to have the
  following properties:</p>
  <taglist>
    <tag>Monotonic</tag>
    <item>The clock is not to move backwards.</item>
    <tag>Intervals are to be near the truth.</tag>
    <item>We want the time (as measured by an atomic clock)
    that passes between two time-stamps, T1 and T2, to be as
    near to T2-T1 as possible.</item>
    <tag>Tight coupling to the wall clock.</tag>
    <item>We want a timer that is to be fired when the wall clock
    reaches a time in the future, to fire as near to that point in
    time as possible.</item>
  </taglist>

  <p>To meet all the criteria, we must use both times so
  that Erlang's "corrected time" moves slightly slower or slightly
  faster than the wall clock time to get in sync with it.
  "Slightly" means a maximum of 1% difference to the wall clock time.
  That is, a sudden change in the wall clock time of one minute, takes
  100 minutes to fix, by letting all "corrected time" move 1% slower
  or faster.</p>

  <p>Needless to say, correcting for a faulty handling of Daylight
  Saving Time can be disturbing to a user comparing the wall clock
  time to, for example, <c>calendar:now_to_local_time(erlang:now())</c>.
  But this function is not supposed to be used for presenting wall
  clock time to the user.</p>

  <p>Time correction is not perfect, but it saves you from
  clocks jumping around, which would make timers in your program
  fire far too late or far too early. Also, it could bring your system
  to its knees only because someone detected a small error
  in the wall clock time of the server where your program runs. So,
  while it can be confusing, it is still an excellent Erlang feature.
  Do not throw it away using time functions that can give you higher
  benchmark results, unless you know what you are doing.</p>

  <section>
    <title>What Does Time Correction Mean in a System?</title>
    <p>Time correction means that Erlang estimates a time from current
    and previous settings of the wall clock. Erlang uses a fairly
    exact tick counter to detect when the wall clock time has jumped
    for some reason and slowly adjusts to the new value.</p>

    <p>This means that the difference between two calls to
    time-corrected functions, such as
    <seealso marker="erlang:now/0">erlang:now()</seealso>,
    can differ
    up to 1% from the corresponding calls to non-time-corrected
    functions (such as <c>os:timestamp()</c>). Also, if comparing
    <c>calendar:local_time/0</c> to
    <c>calendar:now_to_local_time(erlang:now())</c>, you can
    temporarily see a difference, depending on how well kept your
    system is.</p>

    <p>It is important to understand that it is (to the program)
    always unknown if it is the wall clock time that moves in the
    wrong pace or the Erlang corrected time. This can only be determined
    by having an external source of the correct time. If some
    such source is available, the wall clock time can always be kept
    nearly perfect, and no significant difference is then
    detected between the pace of <c>erlang:now/0</c> and the pace of
    the wall clock.</p>

    <p>The time correction means that your system keeps
    its real-time characteristics well, even when the wall clock
    time is unreliable.</p>
  </section>

  <section>
    <title>Where Does Erlang Use Corrected Time?</title>
    <p>For all functionality where real-time characteristics are
    desirable, time correction is used. This basically means the
    following:</p>
    <taglist>
      <tag><seealso marker="erlang:now/0">erlang:now()</seealso></tag>
      <item>This function uses time correction so that
      differences between two <c>now</c> time-stamps correspond to
      other time-outs in the system. This function also holds other
      properties, described later.</item>
      <tag><c>receive</c> ... <c>after</c></tag>
      <item>Time-outs on <c>receive</c> use time correction to
      determine a stable time-out interval.</item>
      <tag>The timer module</tag>
      <item>As the timer module uses other Built-In-Functions (BIFs)
      that deliver corrected time, the timer module itself works with
      corrected time.</item>
      <tag><seealso marker="erlang:start_timer/3">erlang:start_timer/3</seealso>
      and
      <seealso marker="erlang:send_after/3">erlang:send_after/3</seealso></tag>
      <item>The timer BIFs work with corrected time, so that they
      do not fire too early or too late because of changes in the wall
      clock time.</item>
    </taglist>

    <p>All other functionality in the system where <c>erlang:now/0</c>
    or any other time-corrected functionality is used,
    automatically benefit from it, as long as it is not "optimized" to
    use some other time-stamp function, such as
    <c>os:timestamp/0)</c>.</p>

    <p>Modules, such as <c>calendar</c>, and functions, such as
    <seealso marker="erlang:localtime/0">erlang:localtime/0</seealso> use
    the wall clock time as it is currently set on the system. They
    do not use corrected time. However, if you use a <c>now</c> value and
    convert it to local time, you get a corrected local time value,
    which either is or is not what you want. In particular older code
    tends to use <c>erlang:now/0</c> as wall clock time. This is usually
    correct (at least when testing), but can surprise you when
    compared to other times in the system.</p>
  </section>

  <section>
    <title>What Is erlang:now/0?</title>
    <p>The function
      <seealso marker="erlang:now/0">erlang:now()</seealso>
      serves several purposes.
      It is expected to hold the following properties:</p>
    <taglist>
      <tag>Monotonic</tag>
      <item><c>erlang:now()</c> always moves forward and never jumps
      backwards.</item>
      <tag>Correct interval</tag>
      <item>The interval between two <c>erlang:now()</c> calls is
      expected to correspond to the correct time.</item>
      <tag>Absolute correctness</tag>
      <item>The <c>erlang:now/0</c> value is to be possible to convert
      to an absolute and correct date-time, corresponding to the real
      world date and time (the wall clock).</item>
      <tag>System correspondence</tag>
      <item>The <c>erlang:now/0</c> value converted to a date-time is
      expected to correspond to times given by other programs on the
      system (or by functions such as <c>os:timestamp/0)</c>.</item>
      <tag>Unique</tag>
      <item>No two calls to <c>erlang:now</c> on one Erlang node must
      return the same value.</item>
    </taglist>

    <p>All these requirements are possible to uphold at the same
    time if and only if the following apply:</p>
    <taglist>
      <tag>The wall clock time of the system is perfect.</tag>
      <item>The system (OS) time must be perfectly
      in sync with the time as defined by an atomic clock or
      a better time source. A good installation using NTP, which is
      up to date before Erlang starts, has properties that for
      most users and programs are almost indistinguishable from the
      correct time. Any larger manual corrections to the time,
      or after Erlang has started, partly (or
      temporarily) invalidate some of the properties, as the time is
      no longer perfect.</item>
      <tag>Less than one call per microsecond to <c>erlang:now/0</c>
      is done.</tag>
      <item>This means that during <em>any</em> microsecond interval,
      there can be no more than one call to <c>erlang:now/0</c> in the
      system. However, for the system not to lose its properties
      completely, it is enough that it on average is no more than one
      call per microsecond (in one Erlang node).</item>
    </taglist>

    <p>The uniqueness property of <c>erlang:now/0</c> is the most limiting
    property. This means that this function maintains a global state and
    that a hard-to-check property of the system must
    be maintained. For most applications this is not a problem,
    but a future system can manage to violate the
    frequency limit on the calls globally. The uniqueness property is
    also quite useless, as globally unique references
    provide a much better unique value to programs. However, the
    property must be maintained, unless a subtle
    backward compatibility issue is to be introduced.</p>
  </section>

  <section>
    <title>Is erlang:now/0 or os:timestamp/0 to Be Used?</title>
    <p>Use <seealso marker="erlang:now/0">erlang:now()</seealso>
    when you want to keep real-time characteristics.</p>

    <p>Use <c>os:timestamp</c> for things
    such as logs, user communication, and debugging. Typically
    <c>timer:ts</c> uses <c>os:timestamp</c>, as it is a test tool,
    not a real world application API.</p>

    <p>The benefit of using <c>os:timestamp/0</c> is that it is
    faster and does not involve any global state (unless the OS
    has one). The disadvantage is that it is vulnerable to wall
    clock time changes.</p>
  </section>

  <section>
    <title>Turning Off Time Correction</title>
    <p>If, for some reason, time correction causes trouble and you are
    sure that the wall clock time on the system is nearly
    perfect, you can turn off time correction by giving option
    <seealso marker="erts:erl#+c">+c</seealso> to
    <seealso marker="erts:erl">erl(1)</seealso>.
    However, the probability for this being a good idea, is low.</p>
  </section>
</chapter>

