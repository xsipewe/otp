<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd">

<chapter>
  <header>
    <copyright>
      <year>2000</year><year>2016</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

    </legalnotice>

    <title>Testing and Tools</title>
    <prepared>H&aring;kan Mattsson</prepared>
    <responsible>H&aring;kan Mattsson</responsible>
    <docno></docno>
    <approved>H&aring;kan Mattsson</approved>
    <checked></checked>
    <date>2016-12-12</date>
    <rev>%VSN%</rev>
    <file>megaco_debug.xml</file>
  </header>

  <section>
    <title>Tracing</title>
    <p>We have instrumented our code to enable
      tracing. Running the application with tracing deactivated
      causes a neglectible performance overhead (an external call to a
      function that returns an atom). Activation of tracing does not
      require any recompilation of the code, as we rely on the
      Erlang/OTP built-in support for dynamic trace activation. In
      our case, tracing of calls to a given external function.</p>
    <p>Event traces can be viewed in a generic message sequence chart
      tool, <c>et</c>, or as standard output (events are written to stdio).</p>
    <p>For more information, see
      <seealso marker="megaco#enable_trace">
      <c>megaco:enable_trace</c></seealso>, 
      <seealso marker="megaco#disable_trace">
      <c>megaco:disable_trace</c></seealso>, and
      <seealso marker="megaco#set_trace">
      <c>megaco:set_trace</c></seealso>.</p>
  </section>

  <section>
    <title>Measurement and Transformation</title>
    <p>We have included some simple tools for codec measurement (<c>meas</c>),
      performance tests (<c>mstone1</c> and <c>mstone2</c>), and
      message transformation.</p>
    <p>The tools are located in the <c>example/meas</c> directory.</p>

    <section>
      <title>Requirements</title>
      <list type="bulleted">
        <item>Erlang/OTP version R13B01 or later</item>
        <item>Version 3.11 or later of this Megaco application</item>
        <item>Version 1.6.10 or later of the Asn1 application</item>
        <item>The flex libraries; otherwise the flex-powered codecs cannot
          be used</item>
      </list>
    </section>

    <section>
      <title>Meas Results</title>
      <p>The result from the measurement run (<c>meas</c>) is included in four
        Excel-compatible text files:</p>
      <list type="bulleted">
        <item><c>decode_time.xls</c> - Decoding result</item>
        <item><c>encode_time.xls</c> - Encoding result</item>
        <item><c>total_time.xls</c> - Total (decoding + encoding) result</item>
        <item><c>message_size.xls</c> - Message size</item>
      </list>
    </section>

    <section>
      <title>Instruction</title>
      <p>The tool contains the following:</p>
      <list type="bulleted">
        <item>The transformation module
        </item>
        <item>The measurement (<c>meas</c>) modules
        </item>
        <item>The <c>mstone1</c> and <c>mstone2</c> modules
        </item>
        <item>The basic message file
        </item>
      </list>

      <section>
        <title>Message Transformation</title>
        <p>The messages used by the tools are contained in a single message
          package file (more information is provided below). The messages
          in this file are encoded with only one codec. During measurement
          initiation, the messages are read and then transformed to all
          codec formats used in the measurement.</p>
        <p>The message transformation is done by the transformation module.
          It transforms a set of messages encoded with one codec
          into the other base codecs.</p>
      </section>

      <section>
        <title>Measurements</title>
        <p>The following are the two types of measurement tools:</p>
        <list type="bulleted">
          <item>
            <p><c>meas</c></p>
            <p>Performs codec measurements, that is, to see what
              kind of performance can be expected by the different codecs
              provided by the Megaco application.</p>
            <p>The measurement is done by iterating over the decode/encode
              function for approximately 2 seconds per message and counting
              the number of decodes/encodes.</p>
            <p>This tool is best run by modifying the <c>meas.sh.skel</c>
              skeleton script provided by the tool.</p>
            <p>To run the tool manually:</p>
            <code type="none"><![CDATA[
% erl -pa <path-megaco-ebin-dir> -pa <path-to-meas-module-dir>
Erlang (BEAM) emulator version 5.6 [source]

Eshell V5.7.1  (abort with ^G)
1> megaco_codec_meas:start().
...
2> halt().
]]></code>
            <p>Or to make it even easier, assuming a measure to be
              done on all the codecs (as above):</p>
            <code type="none"><![CDATA[
% erl -noshell -pa <path-megaco-ebin-dir> \\
      -pa <path-to-meas-module-dir> \\
      -s megaco_codec_meas -s init stop
]]></code>
            <p>When run as above (this takes some time), the measurement
              process is done as follows:</p>
            <pre>
For each codec:
    For each message:
        Read the message from the file
            Detect message version
            Measure decode
                Measure encode
          Write results, encode, decode, and total, to file</pre>
          </item>
          <item>
            <p><c>mstone1</c> and <c>mstone2</c></p>
            <p>These are two different SMP performance monitoring tools:</p>
            <list type="bulleted">
              <item>
                <p><c>mstone1</c> creates a process for each codec config
                  supported by the Megaco application and lets them run for
                  a specific time (all at the same time), encoding and decoding
                  Megaco messages. The number of messages processed in total
                  is the <c>mstone1(1)</c> value.</p>
                <p>This tool can be run in different ways, for example, with or
                  without the use of drivers, and with <em>only</em>
                  flex-empowered configs.</p>
                <p>This tool is best run by modifying the <c>mstone1.sh.skel</c>
                  skeleton script provided by the tool.</p>
              </item>
              <item>
                <p><c>mstone2</c> is similar to the <c>mstone1</c> tool, but
                  here each created process makes only <em>one</em> run
                  through the messages and then exits. As soon as a process
                  exits, a new process (with the same config and messages)
                  is created to takes its place.
                  The number of messages processed in total
                  is the <c>mstone2(1)</c> value.</p>
              </item>
            </list>
          </item>
        </list>
        <p>Both these tools use the message package (<c>time_test.msgs</c>)
          provided with the tools, although it can run on any message package
          as long as it has the same structure.</p>
      </section>

      <section>
        <title>Message Package File</title>
        <p>The message package file is simply an Erlang-compatible text file
          with the following structure:<br></br>
          <c>{codec_name(), messages_list()}</c>.</p>
        <pre>
codec_name() = pretty | compact | ber | per | erlang
messages_list() = [{message_name(), message()}]
message_name() = atom()
message() = binary()</pre>
        <p>The codec name is the name of the codec with which all messages in
          the <c>message_list()</c> have been encoded.</p>
        <p>This file can be exported to a file structure by calling the
          <seealso marker="megaco_codec_transform#export_messages">
          <c>megaco_codec_transform:export_messages</c></seealso>
          function. This can be useful if a measurement is to be done with
          an external tool. Exporting the messages creates a directory tree
          with the following structure:</p>
        <code type="none"><![CDATA[
<message package>/pretty/<message-files>
                  compact/
                  per/
                  ber/<message-files>
                  erlang/
]]></code>
        <p>The file includes version 1 messages, version 2 messages,
          and version 3 messages.</p>
      </section>
    </section>

    <section>
      <title>Notes</title>
      <section>
        <title>Binary Codecs</title>
        <p>Binary encoding can be used in basically two ways: with or
          without package-related name and termination ID transformation
          (the "native" encoding config). This transformation
          converts package-related names and termination IDs to a more
          convenient internal form (equivalent to the decoded text message).</p>
        <p>The transformation is done <em>after</em> the actual decode has been
          done.</p>
        <p>Also, it is possible to make use of a linked-in driver that
          performs some of the decode/encode, decode for ber and encode for per
          (the "driver" encoding config).</p>
        <p>Therefore, in the tests binary codecs are tested with four
          encoding configs to determine exactly how the
          different options affect the performance:</p>
        <list type="bulleted">
          <item>With transformation and without driver ([])</item>
          <item>Without transformation and without driver ([native])</item>
          <item>With transformation and with driver ([driver])</item>
          <item>Without transformation and with driver ([driver, native])</item>
        </list>
      </section>

      <section>
        <title>Included Test Messages</title>
        <p>Some of the test messages are ripped from the call flow examples
          in an old version of the RFC and others are created to test
          a specific feature of Megaco.</p>
      </section>

      <section>
        <title>Measurement Tool Directory Name</title>
        <p>Do <em>not</em> start the name of the directory containing the
          measurement binaries with "megaco-", for example, "megaco-meas".
          This confuses the Erlang application loader (Erlang applications
          are named, for example, "megaco-1.0.2").</p>
      </section>
    </section>
  </section>
</chapter>

