<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE appref SYSTEM "appref.dtd">

<appref>
  <header>
    <copyright>
      <year>1996</year><year>2016</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>os_mon</title>
    <prepared></prepared>
    <docno></docno>
    <date>2016-11-01</date>
    <rev></rev>
  </header>
  <app>os_mon</app>
  <appsummary>OS monitoring application.</appsummary>
  <description>
    <p>The operating system monitor, OS_Mon, provides the following
      services:</p>
    <list type="bulleted">
      <item><seealso marker="cpu_sup"><c>cpu_sup</c></seealso> -
       CPU load and utilization supervision (Unix)</item>
      <item><seealso marker="disksup"><c>disksup</c></seealso> -
       Disk supervision (Unix, Windows)</item>
      <item><seealso marker="memsup"><c>memsup</c></seealso> -
       Memory supervision (Unix, Windows, VxWorks)</item>
      <item><seealso marker="os_sup"><c>os_sup</c></seealso> -
       Interface to OS system messages (Solaris, Windows)</item>
    </list>
    <p>To simplify the usage of OS_Mon on distributed Erlang systems, it is
      not considered an error trying to use a service at a node where it
      is unavailable (because OS_Mon is not running, or
      the service is unavailable for that OS, or the service
      is not started). Instead, a warning message is issued through
      <c>error_logger</c> and a dummy value is returned, which one is
      specified in the man pages for the respective services.</p>
  </description>

  <section>
    <title>Configuration</title>
    <p>When OS_Mon is started, by default all services available for
      the OS, except <c>os_sup</c>, are automatically started. This
      configuration can be changed using the following application
      configuration parameters:</p>
    <taglist>
      <tag><c>start_cpu_sup = bool()</c></tag>
      <item>
        <p>Specifies if <c>cpu_sup</c> is to be started. Defaults to
          <c>true</c>.</p>
      </item>
      <tag><c>start_disksup = bool()</c></tag>
      <item>
        <p>Specifies if <c>disksup</c> is to be started. Defaults to
          <c>true</c>.</p>
      </item>
      <tag><c>start_memsup = bool()</c></tag>
      <item>
        <p>Specifies if <c>memsup</c> is to be started. Defaults to
          <c>true</c>.</p>
      </item>
      <tag><c>start_os_sup = bool()</c></tag>
      <item>
        <p>Specifies if <c>os_sup</c> is to be started. Defaults to
          <c>false</c>.</p>
      </item>
    </taglist>
    <p>Configuration parameters affecting the different OS_Mon services
      are described in the respective man pages.</p>
    <p>For information about how to change the value of configuration
      parameters, see <seealso marker="kernel:config">
      <c>kernel:config(4)</c></seealso>.</p>
  </section>

  <section>
    <title>SNMP MIB</title>
    <p>The following MIB is defined in OS_Mon:</p>
    <taglist>
      <tag>OTP-OS-MON-MIB</tag>
      <item>
        <p>Contains objects for instrumentation of disk,
          memory, and CPU usage of the nodes in the system.</p>
      </item>
    </taglist>
    <p>The MIB is stored in the <c>mibs</c> directory. It is defined
      in SNMPv2 SMI syntax. An SNMPv1 version of the MIB is delivered
      in the <c>mibs/v1</c> directory.</p>
    <p>The compiled MIB is located under <c>priv/mibs</c>, and
      the generated <c>.hrl</c> file under the <c>include</c> directory.
      To compile a MIB that <em>imports</em> the <c>OTP-OS-MON-MIB</c>, give
      the option <c>{il, ["os_mon/priv/mibs"]}</c> to the MIB compiler.</p>
    <p>If the MIB is to be used in a system, it is to be loaded into
      an agent with a call to <seealso marker="os_mon_mib#load">
      <c>os_mon_mib:load(Agent)</c></seealso>, where
      <c>Agent</c> is the pid or registered name of an SNMP agent.
      To unload the MIB, use <seealso marker="os_mon_mib#unload">
      <c>os_mon_mib:unload(Agent)</c></seealso>.
      The implementation of this MIB uses the Mnesia application to store a
      cache with data needed, which means that Mnesia must be operational.
      The MIB also uses functions defined for the <c>OTP-MIB</c>, thus
      that MIB must also be loaded.</p>
  </section>

  <section>
    <title>See Also</title>
    <p><seealso marker="cpu_sup"><c>cpu_sup(3)</c></seealso>,
      <seealso marker="disksup"><c>disksup(3)</c></seealso>,
      <seealso marker="memsup"><c>memsup(3)</c></seealso>,
      <seealso marker="nteventlog"><c>nteventlog(3)</c></seealso>,
      <seealso marker="os_sup"><c>os_sup(3)</c></seealso>,
      <seealso marker="snmp:snmp"><c>snmp:snmp(3)</c></seealso></p>
  </section>
</appref>

