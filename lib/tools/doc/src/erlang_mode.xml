<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2003</year><year>2013</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>Erlang mode for Emacs</title>
    <prepared>Ingela Anderton</prepared>
    <responsible></responsible>
    <docno></docno>
    <date></date>
    <rev></rev>
  </header>
  <module>erlang.el</module>
  <modulesummary>Erlang mode for Emacs.</modulesummary>
  <description>
    <p>The most important feature of an editor designed for programmers
      can be the ability to indent a line of code in accordance
      with the structure of the programming language. The Erlang mode
      provides this feature. The layout used is based
      on the common use of the language. The mode also provides
      syntax highlighting, electric commands, module name verification,
      comment support including paragraph filling, skeletons, tags
      support, and so on.</p>
    <p>In this section, the use of the word <em>Point</em> means
      "Point can be seen as the position of the
      cursor. More precisely, the point is the position between two
      characters while the cursor is drawn over the character
      following the point".</p>
  </description>

  <section>
    <title>Indentation</title>
    <p>The following commands are directly available for indentation:</p>
    <taglist>
      <tag><c>TAB</c> (<c>erlang-indent-command</c>)</tag>
      <item><p>Indents the current line of code.</p></item>
      <tag><c>M-C-\</c> (<c>indent-region</c>)</tag>
      <item><p>Indents all lines in the region.</p></item>
      <tag><c>M-l</c> (<c>indent-for-comment</c>)</tag>
      <item><p>Inserts a comment character to the right of the code on the
        line (if any).</p></item>
    </taglist>
    <p>Lines containing a comment are indented differently depending on
      the number of <c>%</c> characters used:</p>
    <list type="bulleted">
      <item><p>Lines with one <c>%</c> character are indented to the right
       of the code. The column is specified by variable
       <c>comment-column</c>, default is column 48.</p></item>
      <item><p>Lines with two <c>%</c> characters are indented to the same
       depth as code would have been in the same situation.</p></item>
      <item><p>Lines with three of more <c>%</c> characters are indented to
       the left margin.</p></item>
    </list>
    <p>More indentation commands:</p>
    <taglist>
      <tag><c>C-c C-q</c> (<c>erlang-indent-function</c>)</tag>
      <item><p>Indents the current Erlang function.</p></item>
      <tag><c>M-x erlang-indent-clause RET</c></tag>
      <item><p>Indents the current Erlang clause.</p></item>
      <tag><c>M-x erlang-indent-current-buffer RET</c></tag>
      <item><p>Indents the entire buffer.</p></item>
    </taglist>
  </section>

  <section>
    <title>Edit - Fill Comment</title>
    <p>When editing normal text in text mode, you can let Emacs reformat
      the text by command <c>fill-paragraph</c>. It does not work
      for comments, as it treats the comment characters as words.</p>
    <p>The Erlang editing mode provides a command that knows about the
      Erlang comment structure and it can be used to fill text paragraphs
      in comments.</p>
    <p><em>Example:</em></p>

    <code type="none">
%% This is   just a very simple test to show
%% how the Erlang fill
%% paragraph   command works.</code>

    <p>Clearly, the text is badly formatted. Instead of formatting this
      line by line, use <c>erlang-fill-paragraph</c> by
      pressing <c>M-q</c>. The result is as follows:</p>

    <code type="none">
%% This is just a very simple test to show how the Erlang fill
%% paragraph command works.</code>
  </section>

  <section>
    <title>Edit - Comment/Uncomment Region</title>
    <taglist>
      <tag><c>C-c C-c</c></tag>
      <item><p>Puts comment characters at the beginning of all lines in
        a marked region.</p></item>
      <tag><c>C-u 2 C-c C-c</c></tag>
      <item><p>Puts two comment characters instead of one.</p></item>
      <tag><c>C-c C-u</c></tag>
      <item><p>Undoes a comment-region command.</p></item>
    </taglist>
  </section>

  <section>
    <title>Edit - Moving the Marker</title>
    <taglist>
      <tag><c>C-a M-a </c> (<c>erlang-beginning-of-function</c>)</tag>
      <item><p>Moves the point to the beginning of the current or
       preceding Erlang function. With a
       numeric argument (for example, <c>C-u 2 C-a M-a</c>), the
       function skips backwards over this many Erlang functions. If the
       argument is negative, the point is moved to the beginning of a
       function below the current function.</p></item>
      <tag><c>M-C-a </c> (<c>erlang-beginning-of-clause</c>)</tag>
      <item><p>As above, but moves the point to the beginning of the current
       orpreceding Erlang clause.</p></item>
      <tag><c>C-a M-e </c> (<c>erlang-end-of-function</c>)</tag>
      <item><p>Moves to the
       end of the current or following Erlang function. With a numeric
       argument (for example, <c>C-u 2 C-a M-e</c>), the function
       skips backwards over this many Erlang functions. If the argument
       is negative, the point is moved to the end of a function below
       the current function.</p></item>
      <tag><c>M-C-e </c> (<c>erlang-end-of-clause</c>)</tag>
      <item><p>As above, but moves the point to the end of the current or
       following Erlang clause.</p></item>
    </taglist>
  </section>

  <section>
    <title>Edit - Marking</title>
    <taglist>
      <tag><c>C-c M-h</c> (<c>erlang-mark-function</c>)</tag>
      <item><p>Puts the
       region around the current Erlang function. The point is
       placed in the beginning and the mark at the end of the
       function.</p></item>
      <tag><c>M-C-h </c> (<c>erlang-mark-clause</c>)</tag>
      <item><p>Puts the region
       around the current Erlang clause. The point is placed in the
       beginning and the mark at the end of the function.</p></item>
    </taglist>
  </section>

  <section>
    <title>Edit - Function Header Commands</title>
    <taglist>
      <tag><c>C-c C-j</c> (<c>erlang-generate-new-clause</c>)</tag>
      <item><p>Creates a new clause in the current Erlang function.
       The point is
       placed between the parentheses of the argument list.</p></item>
      <tag><c>C-c C-y</c> (<c>erlang-clone-arguments</c>)</tag>
      <item><p>Copies the function arguments of the preceding Erlang clause.
       This command is useful when defining a new clause with almost the same
       argument as the preceding clause.</p></item>
    </taglist>
  </section>

  <section>
    <title>Edit - Arrows</title>
    <taglist>
      <tag><c>C-c C-a</c> (<c>erlang-align-arrows</c>)</tag>
      <item><p>Aligns arrows after clauses inside a region.</p></item>
    </taglist>
    <p><em>Example:</em></p>

    <code type="none">
sum(L) -> sum(L, 0).
sum([H|T], Sum) -> sum(T, Sum + H);
sum([], Sum) -> Sum.</code>

    <p>This becomes:</p>

    <code type="none">
sum(L)          -> sum(L, 0).
sum([H|T], Sum) -> sum(T, Sum + H);
sum([], Sum)    -> Sum.</code>
  </section>

  <section>
    <title>Syntax Highlighting</title>
    <p>Syntax highlighting can be activated from the Erlang menu. The
      following four alternatives are available:</p>
    <list type="bulleted">
      <item><p>Off: Normal black and white display.</p></item>
      <item><p>Level 1: Function headers, reserved words, comments,
       strings, quoted atoms, and character constants are colored.</p></item>
      <item><p>Level 2: The above, attributes, Erlang BIFs, guards, and
       words in comments enclosed in single quotes are colored.</p></item>
      <item><p>Level 3: The above, variables, records, and macros are
       colored. (This level is also known as the Christmas tree
       level.)</p></item>
    </list>
  </section>

  <section>
    <title>Tags</title>
    <p>For the tag commands to work, you must have
      generated a <c>TAGS</c> file, see the User's Guide, section
      <seealso marker="erlang_mode_chapter#tags">Tags</seealso>.</p>
    <taglist>
      <tag><c>M-.</c> (<c>find-tag</c>)</tag>
      <item><p>Finds a function definition. The default value is the function
       name under the point.</p></item>
      <tag>Find tag (<c>erlang-find-tag</c>)</tag>
      <item><p>Like the Elisp function
       <c>find-tag</c>. Can retrieve Erlang modules. Tags can be
       specified on the forms 'tag', 'module:', and 'module:tag'.</p></item>
      <tag><c>M-+</c> (<c>erlang-find-next-tag</c>)</tag>
      <item><p>Finds thenext occurrence of tag.</p></item>
      <tag><c>M-TAB</c> (<c>erlang-complete-tag</c>)</tag>
      <item><p>Performs completion on the tag entered in a tag search.
       Completes to the set of names listed in the current tags
       table.</p></item>
      <tag>Tags aprops (<c>tags-apropos</c>)</tag>
      <item><p>Displays a list of all
       tags in tags table <c>REGEXP</c> matches.</p></item>
      <tag><c>C-x t s</c> (<c>tags-search</c>)</tag>
      <item><p>Searches
       through all files listed in tags table for match for <c>REGEXP</c>.
       Stops when a match is found.</p></item>
    </taglist>
  </section>

  <section>
    <title>Skeletons</title>
    <p>A skeleton is a piece of prewritten code that can be inserted into
      the buffer. Erlang mode comes with a set of predefined skeletons.
      The skeletons can be accessed either from the Erlang menu or
      from commands named <c>tempo-template-erlang-*</c>, as the
      skeletons are defined using the standard Emacs package <c>tempo</c>.</p>
    <p><em>Brief descriptions of the available skeletons:</em></p>
    <taglist>
      <tag>Simple skeletons: If, Case, Receive, Receive After, Receive
        Loop</tag>
      <item><p>Basic code constructs.</p></item>
      <tag>Header elements: Module, Author</tag>
      <item><p>These commands insert
       lines on the form <c>-module(</c>xxx<c>).</c> and
       <c>-author('my@home').</c>. They can be used directly, but are
       also used as part of the Full Headers described below.</p></item>
      <tag>Full Headers: Small (minimum requirement), Medium (with
       fields for basic information about the module), and Large
       Header (medium header with some extra layout structure).</tag>
      <item></item>
      <tag>Small Server</tag>
      <item><p>Skeleton for a simple server not using OTP.</p></item>
      <tag>Application</tag>
      <item><p>Skeletons for the OTP application behavior.</p></item>
      <tag>Supervisor</tag>
      <item><p>Skeleton for the OTP supervisor behavior.</p></item>
      <tag>Supervisor Bridge</tag>
      <item><p>Skeleton for the OTP supervisor bridge behavior.</p> </item>
      <tag>gen_server</tag>
      <item><p>Skeleton for the OTP <c>gen_server</c> behavior.</p></item>
      <tag>gen_event</tag>
      <item><p>Skeleton for the OTP <c>gen_event</c> behavior.</p></item>
      <tag>gen_fsm</tag>
      <item><p>Skeleton for the OTP <c>gen_fsm</c> behavior.</p></item>
      <tag>Library module</tag>
      <item><p>Skeleton for a module that does not provide a
       process.</p></item>
      <tag>CORBA callback</tag>
      <item><p>Skeleton for a CORBA callback module.</p></item>
      <tag>Erlang test suite</tag>
      <item><p>Skeleton for a callback modul for the Erlang test
       server.</p></item>
    </taglist>
  </section>

  <section>
    <title>Shell</title>
    <taglist>
      <tag>New shell (<c>erlang-shell</c>)</tag>
      <item><p>Starts a new Erlang shell.</p></item>
      <tag><c>C-c C-z,</c> (<c>erlang-shell-display </c>)</tag>
      <item><p>Displays an Erlang shell, or starts a new one if no shell is
       started.</p></item>
    </taglist>
  </section>

  <section>
    <title>Compile</title>
    <taglist>
      <tag><c>C-c C-k,</c> (<c>erlang-compile</c>)</tag>
      <item><p>Compiles the Erlang module in the current buffer.
       You can also use <c>C-u C-c C-k</c>
       to debug compile the module with debug options
       <c>debug_info</c> and <c>export_all</c>.</p></item>
      <tag><c>C-c C-l,</c> (<c>erlang-compile-display</c>)</tag>
      <item><p>Displays compilation output.</p></item>
      <tag><c>C-u C-x`</c></tag>
      <item><p>Starts parsing the compiler output from the
       beginning. This command places the point on the line where
       the first error was found.</p></item>
      <tag><c>C-x`</c> (<c>erlang-next-error</c>)</tag>
      <item><p>Moves the
       point to the next error. The buffer displaying the
       compilation errors is updated so that the current error
       is visible.</p></item>
    </taglist>
  </section>

  <section>
    <title>Man</title>
    <p>On Unix you can view the manual pages in Emacs.
      To find the manual pages, variable <c>erlang-root-dir</c>
      is to be bound to the name of the directory containing the Erlang
      installation. The name is not to include the final slash.
      Practically, add a line on the following form to
      your <c>~/.emacs,</c>:</p>

    <code type="none">
(setq erlang-root-dir "/the/erlang/root/dir/goes/here")</code>
  </section>

  <section>
    <title>Start IMenu</title>
    <taglist>
      <tag><c>M-x imenu-add-to-menubar RET</c></tag>
      <item><p>Creates the <c>IMenu</c> menu containing all the functions
       in the current buffer. The command asks for a suitable
       menu name. Not supported by Xemacs.</p></item>
    </taglist>
  </section>

  <section>
    <title>Version</title>
    <taglist>
      <tag><c>M-x erlang-version RET</c></tag>
      <item><p>Displays the version number of the Erlang editing mode.
       Always supply the version number when asking questions
       about the Erlang mode.</p></item>
    </taglist>
  </section>
</erlref>

