<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd" [
  <!ENTITY start '<seealso marker="#start-3">start/3</seealso>'>
  <!ENTITY gen_tcp_connect3
  '<seealso marker="kernel:gen_tcp#connect-3">gen_tcp:connect/3</seealso>'>
  <!ENTITY gen_tcp_listen2
  '<seealso marker="kernel:gen_tcp#listen-2">gen_tcp:listen/2</seealso>'>
  <!ENTITY ip_address
  '<seealso marker="kernel:inet#type-ip_address">inet:ip_address()</seealso>'>
  <!ENTITY ssl_connect2
  '<seealso marker="ssl:ssl#connect-2">ssl:connect/2</seealso>'>
  <!ENTITY ssl_connect3
  '<seealso marker="ssl:ssl#connect-3">ssl:connect/3</seealso>'>
  <!ENTITY ssl_accept2
  '<seealso marker="ssl:ssl#ssl_accept-2">ssl:ssl_accept/2</seealso>'>
  <!ENTITY ssl_listen2
  '<seealso marker="ssl:ssl#listen-2">ssl:listen/2</seealso>'>
  <!ENTITY gen_tcp '<seealso marker="kernel:gen_tcp">gen_tcp(3)</seealso>'>
  <!ENTITY inet '<seealso marker="kernel:inet">inet(3)</seealso>'>
  <!ENTITY ssl '<seealso marker="ssl:ssl">ssl(3)</seealso>'>
  <!ENTITY % also SYSTEM "seealso.ent" >
  <!ENTITY % here SYSTEM "seehere.ent" >
  %also;
  %here;
]>

<erlref>
  <header>
    <copyright>
      <year>2011</year><year>2016</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>

    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    </legalnotice>

    <title>diameter_tcp(3)</title>
    <prepared>Anders Svensson</prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2016-10-04</date>
    <rev></rev>
    <file>diameter_tcp.xml</file>
  </header>

  <module>diameter_tcp</module>
  <modulesummary>Diameter transport over TCP.</modulesummary>

  <description>
    <p>This module implements Diameter transport over TCP using &gen_tcp;.
      It can be specified as the value of a <c>transport_module</c> option to
      &mod_add_transport; and implements the behavior described in
      &man_transport;.
      TLS security is supported, either as an upgrade following
      capabilities exchange or at connection establishment.</p>

    <p>Notice that the <c>SSL</c> application is required for TLS and must be
      started before configuring TLS capability on Diameter transports.</p>

    <marker id="start"/>
  </description>

  <funcs>
    <func>
      <name>start({Type, Ref}, Svc, [Opt]) -> {ok, Pid}
                                           | {ok, Pid, [LAddr]}
                                           | {error, Reason}</name>
      <fsummary>Start a transport process.</fsummary>
      <type>
        <v>Type = connect | accept</v>
        <v>Ref = &mod_transport_ref;</v>
        <v>Svc = #diameter_service{}</v>
        <v>Opt = OwnOpt | SslOpt | TcpOpt</v>
        <v>Pid = pid()</v>
        <v>LAddr = &ip_address;</v>
        <v>Reason = term()</v>
        <v>OwnOpt = {raddr, &ip_address;}
                  | {rport, integer()}
                  | {accept, Match}
                  | {port, integer()}
                  | {fragment_timer, infinity | 0..16#FFFFFFFF}</v>
        <v>SslOpt = {ssl_options, true | list()}</v>
        <v>TcpOpt = term()</v>
        <v>Match = &ip_address; | string() | [Match]</v>
      </type>
      <desc>
        <p>The start function required by &man_transport;.</p>
        <list type="bulleted">
          <item>
            <p>Options <c>raddr</c> and <c>rport</c> specify the remote address
              and port for a connecting transport and are invalid for a
              listening transport.</p>
          </item>
          <item>
            <p>Option <c>accept</c> specifies remote addresses for a listening
              transport and is invalid for a connecting transport.
              If specified, a remote address that does not match one of the
              specified addresses causes the connection to be aborted.
              Multiple <c>accept</c> options can be specified.
              A string-valued <c>Match</c> that does not parse as an address is
              interpreted as a regular expression.</p>
          </item>
          <item>
            <p>Option <c>ssl_options</c> must be specified for a transport
              that is to support TLS: a value of <c>true</c> results in a
              TLS handshake immediately upon connection establishment while
              <c>list()</c> specifies options to be passed to &ssl_connect2; or
              &ssl_accept2; after capabilities exchange if TLS is
              negotiated.</p>
          </item>
          <item>
            <p>Option <c>fragment_timer</c> specifies the time-out, in
              milliseconds, of a timer used to flush messages from the incoming
              byte stream even if the number of bytes indicated in the Message
              Length field of its Diameter Header have not yet been accumulated;
              such a message is received over the transport interface after
              two successive time-outs without the reception of more bytes.
              Defaults to <c>1000</c>.</p>
          </item>
          <item>
            <p>The remaining options are any accepted by &ssl_connect3; or
              &gen_tcp_connect3; for a connecting transport, or &ssl_listen2;
              or &gen_tcp_listen2; for a listening transport, depending on
              whether <c>{ssl_options, true}</c> has been specified.</p>
          </item>
          <item>
            <p>Options <c>binary</c>, <c>packet</c>, and <c>active</c>
              cannot be specified.</p>
          </item>
          <item>
            <p>Option <c>port</c> can be specified for a listening
              transport to specify the local listening port, the default is
              the standardized 3868.</p>
          </item>
          <item>
            <p>Notice that option <c>ip</c> specifies the local address.</p>
          </item>
        </list>
        <p>An <c>ssl_options</c> list must be specified if and only if
          the transport in question has set <c>Inband-Security-Id</c> to
          1 (<c>TLS</c>), as specified to either &mod_start_service; or
          &mod_add_transport;, so that the transport process will receive
          notification of whether to commence with a TLS handshake following
          capabilities exchange.</p>
        <list type="bulleted">
          <item>
            <p>Failing to specify an options list on a TLS-capable transport
              for which TLS is negotiated causes TLS handshake to fail.</p>
          </item>
          <item>
            <p>Failing to specify TLS capability when <c>ssl_options</c> has
              been specified causes the transport process to wait for a
              notification that will not be forthcoming, which eventually
              causes the RFC 3539 watchdog to take down the connection.</p>
          </item>
        </list>
        <p>If an <c>ip</c> option is not specified, then the first element of a
          non-empty <c>Host-IP-Address</c> list in <c>Svc</c> provides the local
          IP address.
          If neither is specified, the default address selected by &gen_tcp;
          is used.
          In all cases, the selected address is either returned from
          &start; or passed in a <c>connected</c> message over the transport
          interface.</p>
      </desc>
    </func>
  </funcs>

  <section>
    <title>See Also</title>
    <p>&man_main;, &man_transport;, &gen_tcp;, &inet;, &ssl;</p>
  </section>

</erlref>
