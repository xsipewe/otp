<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd" [
  <!ENTITY % also SYSTEM "seealso.ent">
  %also;
]>

<chapter>
  <header>
    <copyright>
      <year>2011</year><year>2016</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>

    <legalnotice>
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
    </legalnotice>

    <title>Introduction</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2016-10-14</date>
    <rev></rev>
    <file>diameter_intro.xml</file>
  </header>

  <section>
    <title>Scope</title>
    <p>The Diameter application is a framework for building
      applications on top of the Diameter protocol.</p>

    <p>The Diameter application is an implementation of the Diameter
      protocol as defined by &the_rfc;.
      It supports any Diameter applications through a
      <em>dictionary</em> interface that allows messages and AVPs to be
      defined and input into Diameter as configuration.
      Diameter has support for all roles defined in the RFC: client,
      server, and agent.</p>

    <p>A Diameter node is implemented by configuring a <em>service</em> and
      one or more <em>transports</em> using the interface module
      <seealso marker="diameter"><c>diameter</c></seealso>.
      The service configuration defines the Diameter applications to be
      supported by the node and, typically, the capabilities that it is to
      send to remote peers at capabilities exchange upon the establishment
      of transport connections.</p>

    <p>A transport is configured on a service and provides protocol-specific
      send/receive functionality through a transport interface defined by
      Diameter and implemented by a transport module.
      The Diameter application provides two transport modules:
      <seealso marker="diameter_tcp"><c>diameter_tcp</c></seealso> and
      <seealso marker="diameter_sctp"><c>diameter_sctp</c></seealso>
      for transport over TCP (using
      <seealso marker="kernel:gen_tcp"><c>Kernel:gen_tcp</c></seealso>)
      and SCTP (using
      <seealso marker="kernel:gen_sctp"><c>Kernel:gen_sctp</c></seealso>)
      respectively.
      Other transports can be provided by any module that implements
      Diameter's <seealso marker="diameter_transport"><em>transport
      interface</em></seealso>.</p>

    <p>While a service typically implements a single Diameter node (as
      identified by an Origin-Host AVP), transports can themselves be
      associated with capabilities AVPs so that a single service can be
      used to implement more than one Diameter node.</p>

    <p>Each Diameter application defined on a service is configured with a
      callback module that implements the <seealso
      marker="diameter_app"><em>application interface</em></seealso> through
      which Diameter communicates the connectivity of remote peers,
      requests
      peer selection for outgoing requests, and communicates the reception of
      incoming Diameter request and answer messages.
      An application using Diameter implements these application callback
      modules to provide the functionality of the Diameter node(s) it
      implements.</p>

    <p>Each Diameter application is also configured with a dictionary module
      that provides encode/decode functionality for outgoing/incoming
      Diameter messages belonging to the application.
      A dictionary module is generated from a <seealso
      marker="diameter_dict"><em>dictionary file</em></seealso> using the
      <seealso marker="diameterc"><c>diameterc</c></seealso> utility.
      Dictionaries for the &the_rfc; Diameter Common Messages, Base
      Accounting, and Relay applications are provided with the Diameter
      application.</p>
  </section>

  <section>
    <title>Prerequisites</title>
    <p>It is assumed that the reader is familiar with the Erlang
      programming language.</p>
  </section>

</chapter>

