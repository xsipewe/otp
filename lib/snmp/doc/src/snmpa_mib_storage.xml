<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2013</year><year>2016</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>snmpa_mib_storage</title>
    <prepared></prepared>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2016-12-15</date>
    <rev></rev>
    <file>snmpa_mib_storage.xml</file>
  </header>

  <module>snmpa_mib_storage</module>
  <modulesummary>Behavior module for the SNMP agent MIB storage.</modulesummary>
  <description>
    <p>This module defines the behavior of the SNMP agent MIB storage. </p>
    <p>The MIB storage is used by the agent to store internal MIB-related
    information. This module is used by several entities,
    not only the <c>mib-server</c>.</p>
    <p>The functions in this module must be exported from an
      <c>snmpa_mib_storage</c>-compliant module.</p>
  </description>

  <section>
    <title>Callback Functions</title>
    <p>The following functions must be exported from a
    <c>mib-server</c> data callback module: </p>
    <marker id="open"></marker>
  </section>

  <funcs>
    <func>
      <name>Module:open(Name, RecordName, Fields, Type, Options)
        -> {ok, TabId} | {error, Reason}</name>
      <fsummary>Create new (mib-server) data instance.</fsummary>
      <type>
        <v>Name = atom()</v>
        <v>RecordName = atom()</v>
        <v>Fields = [atom()]</v>
        <v>Type = set | bag()</v>
        <v>Options = list()</v>
        <v>TabId = term()</v>
        <v>Reason = term()</v>
      </type>
      <desc>
        <p>Creates or opens a MIB storage table. </p>
	<p>Arguments <c>RecordName</c> and <c>Fields</c>
	cannot be used in all implementations (they are only
	needed for Mnesia-based implementations).</p>
	<p>Argument <c>Options</c> comes from
	the <c>options</c> config option of the MIB storage config option,
	and is passed on "as is".</p>
        <marker id="close"></marker>
      </desc>
    </func>

    <func>
      <name>Module:close(TabId) -> void()</name>
      <fsummary>Close the MIB storage table.</fsummary>
      <type>
        <v>State = term()</v>
      </type>
      <desc>
        <p>Closes the MIB storage table.</p>
        <marker id="read"></marker>
      </desc>
    </func>

    <func>
      <name>Module:read(TabId, Key) -> false | {value, Record}</name>
      <fsummary>Read a record from the MIB storage table.</fsummary>
      <type>
        <v>TabId = term()</v>
        <v>Key = term()</v>
        <v>Record = tuple()</v>
      </type>
      <desc>
        <p>Reads a record from the MIB storage table. </p>
        <marker id="write"></marker>
      </desc>
    </func>

    <func>
      <name>Module:write(TabId, Record) -> ok | {error, Reason}</name>
      <fsummary>Write a record to the MIB storage table.</fsummary>
      <type>
        <v>TabId = term()</v>
        <v>Record = tuple()</v>
        <v>Reason = term()</v>
      </type>
      <desc>
        <p>Writes a record to the MIB storage table. </p>
        <marker id="delete1"></marker>
      </desc>
    </func>

    <func>
      <name>Module:delete(TabId) -> void()</name>
      <fsummary>Delete an entire MIB storage table.</fsummary>
      <type>
        <v>TabId = term()</v>
      </type>
      <desc>
        <p>Deletes an entire MIB storage table. </p>
        <marker id="delete2"></marker>
      </desc>
    </func>

    <func>
      <name>Module:delete(TabId, Key) -> ok | {error, Reason}</name>
      <fsummary>Delete a record from the MIB storage table.</fsummary>
      <type>
        <v>TabId = term()</v>
        <v>Key = term()</v>
        <v>Reason = term()</v>
      </type>
      <desc>
        <p>Deletes a record from the MIB storage table. </p>
        <marker id="match_object"></marker>
      </desc>
    </func>

    <func>
      <name>Module:match_object(TabId, Pattern) -> {ok, Recs} | {error, Reason}
      </name>
      <fsummary>Search the MIB storage table for record matching pattern.
      </fsummary>
      <type>
        <v>TabId = term()</v>
        <v>Pattern = match_pattern()</v>
        <v>Recs = [tuple()]</v>
        <v>Reason = term()</v>
      </type>
      <desc>
        <p>Searches the MIB storage table for records that match the
	specified pattern. </p>
        <marker id="match_delete"></marker>
      </desc>
    </func>

    <func>
      <name>Module:match_delete(TabId, Pattern) -> {ok, Recs} | {error, Reason}
      </name>
      <fsummary>Delete records in the MIB storage table matching pattern.
      </fsummary>
      <type>
        <v>TabId = term()</v>
        <v>Pattern = match_pattern()</v>
        <v>Recs = [tuple()]</v>
        <v>Reason = term()</v>
      </type>
      <desc>
        <p>Searches the MIB storage table for records that match the
	specified pattern and then deletes them. The deleted records are
	also returned. </p>
        <marker id="tab2list"></marker>
      </desc>
    </func>

    <func>
      <name>Module:tab2list(TabId) -> Recs</name>
      <fsummary>Return all records of the MIB storage table.</fsummary>
      <type>
        <v>TabId = term()</v>
        <v>Recs = [tuple()]</v>
      </type>
      <desc>
        <p>Returns all records in the MIB storage table in the form
	of a list. </p>
        <marker id="info"></marker>
      </desc>
    </func>

    <func>
      <name>Module:info(TabId) -> {ok, Info} | {error, Reason}</name>
      <fsummary>Returns information about the MIB storage table.</fsummary>
      <type>
        <v>TabId = term()</v>
        <v>Info = term()</v>
        <v>Reason = term()</v>
      </type>
      <desc>
        <p>Returns implementation-dependent MIB storage table
	information. </p>
        <marker id="sync"></marker>
      </desc>
    </func>

    <func>
      <name>Module:sync(TabId) -> void()</name>
      <fsummary>Synchronize MIB storage table.</fsummary>
      <type>
        <v>TabId = term()</v>
      </type>
      <desc>
        <p>Synchronizes the MIB storage table. </p>
	<p>What this means, if anything, is implementation-dependent. </p>
        <marker id="backup"></marker>
      </desc>
    </func>

    <func>
      <name>Module:backup(TabId, BackupDir) -> ok | {error, Reason}</name>
      <fsummary>Perform a backup of the MIB storage table.</fsummary>
      <type>
        <v>TabId = term()</v>
        <v>BackupDir = string()</v>
        <v>Reason = term()</v>
      </type>
      <desc>
        <p>Performs a backup of the MIB storage table. </p>
        <p>What this means, if anything, is implementation-dependent. </p>
      </desc>
    </func>
  </funcs>
  
</erlref>

