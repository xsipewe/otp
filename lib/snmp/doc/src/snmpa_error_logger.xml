<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1996</year><year>2016</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>snmpa_error_logger</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2016-11-22</date>
    <rev></rev>
    <file>snmpa_error_logger.xml</file>
  </header>
  <module>snmpa_error_logger</module>
  <modulesummary>Functions for reporting SNMP errors through the error_logger.
  </modulesummary>
  <description>
    <p>This module provides the <c>snmpa_error_report</c> behavior
      (see <seealso marker="snmpa_error_report">
      <c>snmpa_error_report</c></seealso>)
      containing two callback functions, which are called to
      report SNMP errors.
      </p>
    <p>This module provides a simple mechanism for reporting SNMP
      errors. Errors are sent to the <c>error_logger</c> after a
      size check. Messages are truncated after 1024 characters.
      It is provided as an example.
      </p>
    <p>This module is the default error report module, but can be
      explicitly configured, see the
      <seealso marker="snmpa_error#desc"><c>snmpa_error</c></seealso>
      module and section
      <seealso marker="snmp_config#configuration_params">
      Configuring the Application</seealso> in the User's Guide.
      </p>
  </description>

  <funcs>
    <func>
      <name>config_err(Format, Args) -> void()</name>
      <fsummary>Called if a configuration error occurs.</fsummary>
      <type>
        <v>Format = string()</v>
        <v>Args = list()</v>
      </type>
      <desc>
        <p>The function is called if an error occurs during the
          configuration phase, for example, if a syntax error is found in
          a configuration file.
          </p>
        <p><c>Format</c> and <c>Args</c> are as in
          <seealso marker="stdlib:io#format/1">
          <c>io:format(Format, Args)</c></seealso> in STDLIB.</p>
      </desc>
    </func>

    <func>
      <name>user_err(Format, Args) -> void()</name>
      <fsummary>Called if a user-related error occurs.</fsummary>
      <type>
        <v>Format = string()</v>
        <v>Args = list()</v>
      </type>
      <desc>
        <p>The function is called if a user-related error occurs at
          runtime, for example, if a user-defined instrumentation
          function returns erroneous.
          </p>
        <p><c>Format</c> and <c>Args</c> are as in
          <seealso marker="stdlib:io#format/1">
          <c>io:format(Format, Args)</c></seealso> in STDLIB.</p>
      </desc>
    </func>
  </funcs>

  <section>
    <title>See Also</title>
    <p><seealso marker="kernel:error_logger">
      <c>kernel:error_logger(3)</c></seealso></p>
  </section>
  
</erlref>

