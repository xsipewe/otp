<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2007</year><year>2016</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>snmpm_network_interface_filter</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2016-12-15</date>
    <rev></rev>
    <file>snmpm_network_interface_filter.xml</file>
  </header>
  <module>snmpm_network_interface_filter</module>
  <modulesummary>Behavior module for the SNMP manager network interface filter.
  </modulesummary>
  <description>
    <p>This module defines the behavior of the manager network interface
      filter.</p>
    <p>The functions in this module must be exported from an
      <c>snmpm_network_interface_filter</c>-compliant module.</p>
    <p>The purpose of the network interface filter is to allow for filtering
      of messages (accept or reject) receive and send. This is done
      on two levels: </p>
    <list type="bulleted">
      <item>
        <p>The first level is at the UDP entry/exit point, that is,
          immediately after the receipt of the message, before any message
          processing is done (<c>accept_recv</c>) and
          immediately before sending the message, after all message
          processing is done (<c>accept_send</c>).</p>
      </item>
      <item>
        <p>The second level is at the MPD entry/exit point, that is,
          immediately after the basic message processing
          (<c>accept_recv_pdu</c>) and immediately before the basic message
          processing (<c>accept_send_pdu</c>).</p>
      </item>
    </list>
    <p>Notice that the network interface filter is something that is used
    by the network interface implementation provided by the application
    (<c>snmpm_net_if</c> and <c>snmpm_net_if_mt</c>).
    The default filter accepts all messages.</p>
    <p>A network interface filter can, for example, be used during testing
    or for load regulation. </p>
    <p>Legacy network interface filter modules used arguments on the form
      <c>(IpAddr, PortNumber, ...)</c> instead of
      <c>(Domain, Addr, ...)</c>. If the SNMP manager is run without
      changing the configuration to use transport domains,
      the network interface filter still gets
      the old arguments and works as before.</p>
    <p>In addition to the data types below,
      see also the data types in <seealso marker="snmpa_conf#types">
      <c>snmpa_conf</c></seealso>.</p>
  </description>

  <datatypes>
    <datatype>
      <name name="port() = integer() > 0"/>
    </datatype>
    <datatype>
      <name name="pdu_type() = 'get-request' | 'get-next-request'
        | 'get-response' | 'set-request' | trap | 'get-bulk-request'
        | 'inform-request' | report | trappdu"/>
      <desc>
      <marker id="accept_recv"></marker>
      </desc>
    </datatype>
  </datatypes>

  <funcs>
    <func>
      <name>accept_recv(Domain, Addr) -> boolean()</name>
      <fsummary>Shall the received message be accepted.</fsummary>
      <type>
	<v>Domain = transportDomain()</v>
	<v>Addr = transportAddressWithPort()</v>
      </type>
      <desc>
        <p>Called at the reception of a message (before <em>any</em> processing
          has been done).</p>
        <p>For the message to be rejected, the function <em>must</em> return
          <em>false</em>. </p>
        <marker id="accept_send"></marker>
      </desc>
    </func>

    <func>
      <name>accept_send(Domain, Addr) -> boolean()</name>
      <fsummary>Shall the message be sent.</fsummary>
      <type>
	<v>Domain = transportDomain()</v>
	<v>Addr = transportAddressWithPort()</v>
      </type>
      <desc>
        <p>Called before the sending of a message (after <em>all</em> processing
          has been done).</p>
        <p>For the message to be rejected, the function <em>must</em> return
          <em>false</em>. </p>
        <marker id="accept_recv_pdu"></marker>
      </desc>
    </func>

    <func>
      <name>accept_recv_pdu(Domain, Addr, PduType) -> boolean()</name>
      <fsummary>Shall the received PDU be accepted.</fsummary>
      <type>
	<v>Domain = transportDomain()</v>
	<v>Addr = transportAddressWithPort()</v>
        <v>PduType = pdu_type()</v>
      </type>
      <desc>
        <p>Called after the basic message processing (MPD) has been done,
          but before the PDU is handed over to the server for primary
          processing.</p>
        <p>For the PDU to be rejected, the function <em>must</em> return
          <em>false</em>. </p>
        <marker id="accept_send_pdu"></marker>
      </desc>
    </func>

    <func>
      <name>accept_send_pdu(Domain, Addr, PduType) -> boolean()</name>
      <fsummary>Shall the PDU be sent.</fsummary>
      <type>
	<v>Domain = transportDomain()</v>
	<v>Addr = transportAddressWithPort()</v>
        <v>PduType = pdu_type() > 0</v>
      </type>
      <desc>
        <p>Called before the basic message processing (MPD) is done,
          when a PDU has been received from the master agent.</p>
        <p>For the message to be rejected, the function <em>must</em> return
          <em>false</em>. </p>
      </desc>
    </func>
  </funcs>
  
</erlref>

