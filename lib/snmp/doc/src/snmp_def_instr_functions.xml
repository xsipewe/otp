<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd">

<chapter>
  <header>
    <copyright>
      <year>1997</year><year>2016</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>Definition of Instrumentation Functions</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2016-11-17</date>
    <rev></rev>
    <file>snmp_def_instr_functions.xml</file>
  </header>
  <p>This section describes
    the user-defined functions, which the agent calls at different times.
    </p>

  <section>
    <title>Variable Instrumentation</title>
    <p>For scalar variables, a function <c>f(Operation, ...)</c> must
      be defined.
      </p>
    <p>The <c>Operation</c> can be <c>new</c>, <c>delete</c>,
      <c>get</c>, <c>is_set_ok</c>, <c>set</c>, or <c>undo</c>.
      </p>
    <p>If an error occurs, all instrumentation functions can return
      an SNMPv1 or SNMPv2 error code. If it returns an SNMPv2
      code, it is converted into an SNMPv1 code before it is sent to a
      SNMPv1 manager. It is  recommended to use the SNMPv2 error codes
      for all instrumentation functions, as these provide more
      details. For a description of error code conversions, see
      <seealso marker="snmp_app_a">SNMP Appendix A</seealso>.
      </p>

    <section>
      <title>f(new [, ExtraArgs])</title>
      <p>This function is called for each variable in the MIB when the
        MIB is loaded into the agent. This makes it possible to perform
        necessary initialization.
        </p>
      <p>This function is optional. The return value is discarded.</p>
    </section>

    <section>
      <title>f(delete [, ExtraArgs])</title>
      <p>This function is called for each object in a MIB when the
        MIB is unloaded from the agent. This makes it possible to
        perform necessary cleanup.
        </p>
      <p>This function is optional. The return value is discarded.</p>
    </section>

    <section>
      <title>f(get [, ExtraArgs])</title>
      <p>This function is called when a <c>get</c> or <c>get-next</c>
        request refers to the variable.
        </p>
      <p>This function is mandatory.
        </p>

      <section>
        <title>Valid Return Values</title>
        <list type="bulleted">
          <item><p><c>{value, Value}</c>. The <c>Value</c> must be of
           correct type, length, and within ranges, otherwise
           <c>genErr</c> is returned in the response PDU. If the
           object is an enumerated integer, the symbolic enum value
           can be used as an atom. If the object is of type BITS, the
           return value must be an integer or a list of bits that
           are set.</p>
          </item>
          <item><p><c>{noValue, noSuchName}</c> (SNMPv1)</p>
          </item>
          <item><p><c>{noValue, noSuchObject | noSuchInstance}</c> (SNMPv2)</p>
          </item>
          <item><p><c>genErr</c>. Used if an error occurred. This
           is to be an internal processing error, for example, caused
           by a programming fault somewhere. If the variable does not
           exist, use <c>{noValue, noSuchName}</c> or
          <c>{noValue, noSuchInstance}</c>.</p>
          </item>
        </list>
      </section>
    </section>

    <section>
      <title>f(is_set_ok, NewValue [, ExtraArgs])</title>
      <p>This function is
        called in phase one of the <c>set</c> request
        processing so that the new value can be checked for
        inconsistencies.
        </p>
      <p><c>NewValue</c> is guaranteed to be of the correct type,
        length, and within ranges, as specified in the MIB. If the
        object is an enumerated integer or of type BITS, the integer
        value is used.
        </p>
      <p>This function is optional.
        </p>
      <p>If this function is called, it will be called again
        with <c>undo</c> or <c>set</c> as first argument.
        </p>

      <section>
        <title>Valid Return Values</title>
        <list type="bulleted">
          <item><c>noError</c></item>
          <item><c>badValue | noSuchName | genErr</c> (SNMPv1)</item>
          <item><c>noAccess | noCreation | inconsistentValue |
            resourceUnavailable | inconsistentName |
            genErr</c> (SNMPv2)</item>
        </list>
      </section>
    </section>

    <section>
      <title>f(undo, NewValue [, ExtraArgs])</title>
      <p>If an error occurred, this function is called after function
        <c>is_set_ok</c> is called. If <c>set</c> is called for
        this object, <c>undo</c> is not called.
        </p>
      <p><c>NewValue</c> is guaranteed to be of the correct type,
        length, and within ranges, as specified in the MIB. If the
        object is an enumerated integer or of type BITS, the integer
        value is used.
        </p>
      <p>This function is optional.
        </p>

      <section>
        <title>Valid Return Values</title>
        <list type="bulleted">
          <item><c>noError</c></item>
          <item><c>genErr</c> (SNMPv1)</item>
          <item><c>undoFailed | genErr</c> (SNMPv2)</item>
        </list>
      </section>
    </section>

    <section>
      <title>f(set, NewValue [, ExtraArgs])</title>
      <p>This function is called to perform the set in phase two of
        the <c>set</c> request processing. It is only called if the
        corresponding <c>is_set_ok</c> function is present and returns
        <c>noError</c>.
        </p>
      <p><c>NewValue</c> is guaranteed to be of the correct type,
        length, and within ranges, as specified in the MIB. If the
        object is an enumerated integer or of type BITS, the integer
        value is used.
        </p>
      <p>This function is mandatory.
        </p>

      <section>
        <title>Valid Return Values</title>
        <list type="bulleted">
          <item><c>noError</c></item>
          <item><c>genErr</c> (SNMPv1)</item>
          <item><c>commitFailed | undoFailed | genErr</c> (SNMPv2)</item>
        </list>
      </section>
    </section>
  </section>

  <section>
    <title>Table Instrumentation</title>
    <p>For tables, a <c>f(Operation, ...)</c> function is to be
      defined (the function shown is exemplified with <c>f</c>).
      </p>
    <p>The <c>Operation</c> can be <c>new</c>, <c>delete</c>,
      <c>get</c>, <c>next</c>, <c>is_set_ok</c>, <c>undo</c>, or
      <c>set</c>.
      </p>
    <p>If an error occurs, all instrumentation functions can return
      an SNMPv1 or SNMPv2 error code. If it returns an SNMPv2
      code, it is converted into an SNMPv1 code before it is sent to a
      SNMPv1 manager. It is  recommended to use the SNMPv2 error codes
      for all instrumentation functions, as these provide more
      details. For a description of error code conversions, see
      <seealso marker="snmp_app_a">SNMP Appendix A</seealso>.</p>

    <section>
      <title>f(new [, ExtraArgs])</title>
      <p>This function is called for each object in a MIB when the
        MIB is loaded into the agent. This makes it possible to perform
        the necessary initialization.
        </p>
      <p>This function is optional. The return value is discarded.</p>
    </section>

    <section>
      <title>f(delete [, ExtraArgs])</title>
      <p>This function is called for each object in a MIB when the
        MIB is unloaded from the agent. This makes it possible to
        perform any necessary cleanup.
        </p>
      <p>This function is optional. The return value is discarded.</p>
    </section>

    <section>
      <title>f(get, RowIndex, Cols [, ExtraArgs])</title>
      <p>This function is called when a <c>get</c> request refers to a table.
        </p>
      <p>This function is mandatory.
        </p>

      <section>
        <title>Arguments</title>
        <list type="bulleted">
          <item><p><c>RowIndex</c> is a list of integers that define the
           key values for the row. <c>RowIndex</c> is the list
           representation (list of integers), which follows the
           <c>Cols</c> integer in the <c>OBJECT IDENTIFIER</c>.</p>
          </item>
          <item><p><c>Cols</c> is a list of integers that represent the
           column numbers. The <c>Cols</c> are sorted by increasing
           value and are guaranteed to be valid column numbers.</p></item>
        </list>
      </section>

      <section>
        <title>Valid Return Values</title>
        <list type="bulleted">
          <item>
            <p>A list with as many elements as the <c>Cols</c> list,
              where each element is the value of the corresponding
              column. Each element can be any of the following:</p>
            <list type="bulleted">
              <item><p><c>{value, Value}</c>. <c>Value</c> must be of
               correct type, length, and within ranges, otherwise
               <c>genErr</c> is returned in the response PDU. If the
               object is an enumerated integer, the symbolic enum
               value can be used (as an atom). If the object is of
               type BITS, the return value shall must be an integer or a
               list of bits that are set.</p>
              </item>
              <item><p><c>{noValue, noSuchName}</c> (SNMPv1)</p>
              </item>
              <item><p><c>{noValue, noSuchObject | noSuchInstance}</c>
               (SNMPv2)</p>
              </item>
            </list>
          </item>
          <item><p><c>{noValue, Error}</c>. If the row does not exist
           because all columns have <c>{noValue, Error}</c>), the
           single tuple <c>{noValue, Error}</c> can be returned.
           This is a shorthand for a list with all elements
           <c>{noValue, Error}</c>.</p>
          </item>
          <item><p><c>genErr</c>. Used if an error occurred. This
           is to be an internal processing error, for example caused
           by a programming fault somewhere. If some column does not
           exist, use <c>{noValue, noSuchName}</c> or
          <c>{noValue, noSuchInstance}</c>.</p>
          </item>
        </list>
      </section>
    </section>

    <section>
      <title>f(get_next, RowIndex, Cols [, ExtraArgs])</title>
      <p>This function is called when a <c>get-next</c> or
        <c>get-bulk</c> request refers to the table.
        </p>
      <p>Argument <c>RowIndex</c> can refer to an existing row or a
        non-existing row, or it can be unspecified. The <c>Cols</c> list
        can refer to inaccessible columns or non-existing columns. For
        each column in the <c>Cols</c> list, the corresponding next
        instance is determined, and the last part of its <c>OBJECT
        IDENTIFIER</c> and its value are returned.
        </p>
      <p>This function is mandatory.
        </p>

      <section>
        <title>Arguments</title>
        <list type="bulleted">
          <item><p><c>RowIndex</c> is a list of integers (possibly empty)
           that defines the key values for a row. <c>RowIndex</c>
           is the list representation (list of integers), which follows
           the <c>Cols</c> integer in the <c>OBJECT IDENTIFIER</c>.</p>
          </item>
          <item><p><c>Cols</c> is a list of integers, greater than or
           equal to zero, which represents the column numbers.</p></item>
        </list>
      </section>

      <section>
        <title>Valid Return Values</title>
        <list type="bulleted">
          <item>
            <p>A list with as many elements as the <c>Cols</c> list
              Each element can be any of the following:</p>
            <list type="bulleted">
              <item><p><c>{NextOid, NextValue}</c>, where <c>NextOid</c>
               is the lexicographic next <c>OBJECT IDENTIFIER</c> for the
               corresponding column. This is to be specified as the
               <c>OBJECT IDENTIFIER</c> part following the table entry. This
               means that the first integer is the column number and
               the rest is a specification of the keys.
               <c>NextValue</c> is the value of this element.</p>
              </item>
              <item><p><c>endOfTable</c> if no accessible
               elements exist after this one.</p>
              </item>
            </list>
          </item>
          <item><p><c>{genErr, Column}</c>, where <c>Column</c> denotes
           the column that caused the error. <c>Column</c> must be
           one of the columns in the <c>Cols</c> list. This
           is to be an internal processing error, for example caused
           by a programming fault somewhere. If some column does not
           exist, you must return the next accessible element (or
          <c>endOfTable</c>).</p> 
          </item>
        </list>
      </section>
    </section>

    <section>
      <title>f(is_set_ok, RowIndex, Cols [, ExtraArgs])</title>
      <p>This function is called in phase one of the <c>set</c> request
        processing so that new values can be checked for
        inconsistencies.
        </p>
      <p>If the function is called, it will be called again with
        <c>undo</c> or <c>set</c> as first argument.
        </p>
      <p>This function is optional.
        </p>

      <section>
        <title>Arguments</title>
        <list type="bulleted">
          <item><p><c>RowIndex</c> is a list of integers that define the
           key values for the row. <c>RowIndex</c> is the list
           representation (list of integers), which follows the
           <c>Cols</c> integer in the <c>OBJECT IDENTIFIER</c>.</p>
          </item>
          <item><p><c>Cols</c> is a list of <c>{Column, NewValue}</c>,
           where <c>Column</c> is an integer, and <c>NewValue</c> is
           guaranteed to be of the correct type, length, and within
           ranges, as specified in the MIB. If the object is an
           enumerated integer or of type BITS, the integer value is
           used. The list is sorted by <c>Column</c> (increasing) and
           each <c>Column</c> is guaranteed to be a valid column
           number.</p></item>
        </list>
      </section>

      <section>
        <title>Valid Return Values</title>
        <list type="bulleted">
          <item><p><c>{noError, 0}</c></p></item>
          <item><p><c>{Error, Column}</c>, where <c>Error</c> is the same
           as for <c>is_set_ok</c> for variables, and <c>Column</c>
           denotes the faulty column. <c>Column</c> must be one of the
           columns in the <c>Cols</c> list.</p></item>
        </list>
      </section>
    </section>

    <section>
      <title>f(undo, RowIndex, Cols [, ExtraArgs])</title>
      <p>If an error occurs, this function is called after the
        <c>is_set_ok</c> function. If <c>set</c> is called for this
        object, <c>undo</c> is not called.
        </p>
      <p>This function is optional.
        </p>

      <section>
        <title>Arguments</title>
        <list type="bulleted">
          <item><p><c>RowIndex</c> is a list of integers that define the
           key values for the row. <c>RowIndex</c> is the list
           representation (list of integers), which follows the
           <c>Cols</c> integer in the <c>OBJECT IDENTIFIER</c>.</p>
          </item>
          <item><p><c>Cols</c> is a list of <c>{Column, NewValue}</c>,
           where <c>Column</c> is an integer, and <c>NewValue</c> is
           guaranteed to be of the correct type, length, and within
           ranges, as specified in the MIB. If the object is an
           enumerated integer or of type BITS, the integer value is
           used. The list is sorted by <c>Column</c> (increasing) and
           each <c>Column</c> is guaranteed to be a valid column
           number.</p>
          </item>
        </list>
      </section>

      <section>
        <title>Valid Return Values</title>
        <list type="bulleted">
          <item><c>{noError, 0}</c></item>
          <item><c>{Error, Column}</c>, where <c>Error</c> is the same
           as for <c>undo</c> for variables, and <c>Column</c> denotes
           the faulty column. <c>Column</c> must be one of the columns
           in the <c>Cols</c> list.
          </item>
        </list>
      </section>
    </section>

    <section>
      <title>f(set, RowIndex, Cols [, ExtraArgs])</title>
      <p>This function is called to perform the set in phase two of
        the <c>set</c> request processing. It is only called if the
        corresponding <c>is_set_ok</c> function did not exist, or
        returned <c>{noError, 0}</c>.
        </p>
      <p>This function is mandatory.
        </p>

      <section>
        <title>Arguments</title>
        <list type="bulleted">
          <item><p><c>RowIndex</c> is a list of integers that define the
           key values for the row. <c>RowIndex</c> is the list
           representation (list of integers), which follows the
           <c>Cols</c> integer in the <c>OBJECT IDENTIFIER</c>.</p>
          </item>
          <item><p><c>Cols</c> is a list of <c>{Column, NewValue}</c>,
           where <c>Column</c> is an integer, and <c>NewValue</c> is
           guaranteed to be of the correct type, length, and within
           ranges, as specified in the MIB. If the object is an
           enumerated integer or of type BITS, the integer value is
           used. The list is sorted by <c>Column</c> (increasing) and
           each <c>Column</c> is guaranteed to be a valid column
           number.</p>
          </item>
        </list>
      </section>

      <section>
        <title>Valid Return Values</title>
        <list type="bulleted">
          <item><c>{noError, 0}</c></item>
          <item><c>{Error, Column}</c>, where <c>Error</c> is the same
           as <c>set</c> for variables, and <c>Column</c> denotes
           the faulty column. <c>Column</c> must be one of the columns
           in the <c>Cols</c> list.</item>
        </list>
      </section>
    </section>
  </section>
</chapter>

