<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1996</year><year>2016</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>snmpa_local_db</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2016-11-23</date>
    <rev></rev>
    <file>snmpa_local_db.xml</file>
  </header>
  <module>snmpa_local_db</module>
  <modulesummary>The SNMP built-in database.</modulesummary>
  <description>
    <p>This module contains functions for
      implementing tables (and variables) using the SNMP built-in
      database. The database exists in two instances, one volatile
      and one persistent. The volatile database is implemented with
      <seealso marker="stdlib:ets"><c>stdlib:ets</c></seealso>.
      The persistent database is implemented with
      <seealso marker="stdlib:dets"><c>stdlib:dets</c></seealso>. 
      </p>
    <p>A scaling problem exists with this database:
      </p>
    <list type="bulleted">
      <item>Insertions and deletions are inefficient for large tables.
      </item>
    </list>
    <p>This problem is best solved by using the
      <seealso marker="mnesia">Mnesia</seealso> application instead.
      </p>
    <p>The functions in this module describe the interface to
      <c>snmpa_local_db</c>. Each function has a Mnesia equivalent.
      The argument <c>NameDb</c> is a tuple <c>{Name, Db}</c>, where
      <c>Name</c> is the symbolic name of the managed object (as defined
      in the MIB), and <c>Db</c> is <c>volatile</c> or
      <c>persistent</c>. Mnesia is not possible, as all these
      functions are <c>snmpa_local_db</c>-specific.
      </p>
  </description>

  <datatypes>
    <datatype>
      <name name="NameDb = {Name, Db}"/>
    </datatype>
    <datatype>
      <name name="Name = atom(), Db = volatile | persistent"/>
    </datatype>
    <datatype>
      <name name="RowIndex = [int()]"/>
      <desc>
        <p><c>RowIndex</c> denotes the last part of the OID that
          specifies the index of the row in the table.</p>
      </desc> 
    </datatype>
    <datatype>
      <name name="Cols = [Col] | [{Col, Value}], Col = int(), Value = term()"/>
      <desc>
        <p><c>Cols</c> is a list of column numbers for a <c>get</c> operation,
          and a list of column numbers and values for a <c>set</c>
          operation.</p>
      </desc>
    </datatype>
  </datatypes>

  <funcs>
    <func>
      <name>dump() -> ok | {error, Reason}</name>
      <fsummary>Dump the database to disk.</fsummary>
      <type>
        <v>Reason = term()</v>
      </type>
      <desc>
        <p>Dumps the database to file.</p>
      </desc>
    </func>

    <func>
      <name>match(NameDb, Pattern)</name>
      <fsummary>Perform a match on the table.</fsummary>
      <desc>
        <p>Performs an <c>ets</c>/<c>dets</c> matching on the table.
          For a description of <c>Pattern</c> and the return values, see
          <seealso marker="stdlib:ets"><c>stdlib:ets</c></seealso>.</p>
      </desc>
    </func>

    <func>
      <name>print()</name>
      <name>print(TableName)</name>
      <name>print(TableName, Db)</name>
      <fsummary>Print the database to screen.</fsummary>
      <type>
        <v>TableName = atom()</v>
      </type>
      <desc>
        <p>Prints the contents of the database
          on-screen. This is useful for debugging, as the
          <c>STANDARD-MIB</c> and <c>OTP-SNMPEA-MIB</c>
          (and perhaps your own MIBs) are stored in <c>snmpa_local_db</c>.
          </p>
        <p><c>TableName</c> is an atom for a table in the database.
          When no name is specified, the whole database is shown.</p>
      </desc>
    </func>

    <func>
      <name>table_create(NameDb) -> bool()</name>
      <fsummary>Create a table.</fsummary>
      <desc>
        <p>Creates a table. If the table already exists, the old copy
          is destroyed.
          </p>
        <p>Returns <c>false</c> if argument <c>NameDb</c> is
          incorrectly specified, otherwise <c>true</c>.</p>
      </desc>
    </func>

    <func>
      <name>table_create_row(NameDb, RowIndex, Row) -> bool()</name>
      <fsummary>Create a row in a table.</fsummary>
      <type>
        <v>Row = {Val1, Val2, ..., ValN}</v>
        <v>Val1 = Val2 = ... = ValN = term()</v>
      </type>
      <desc>
        <p>Creates a row in a table. <c>Row</c> is a tuple with
          values for all columns, including the index columns.</p>
      </desc>
    </func>

    <func>
      <name>table_delete(NameDb) -> void()</name>
      <fsummary>Delete a table.</fsummary>
      <desc>
        <p>Deletes a table.</p>
      </desc>
    </func>

    <func>
      <name>table_delete_row(NameDb, RowIndex) -> bool()</name>
      <fsummary>Delete a row in the table.</fsummary>
      <desc>
        <p>Deletes a row in the table.</p>
      </desc>
    </func>

    <func>
      <name>table_exists(NameDb) -> bool()</name>
      <fsummary>Check if a table exists.</fsummary>
      <desc>
        <p>Checks if a table exists.</p>
      </desc>
    </func>

    <func>
      <name>table_get_row(NameDb, RowIndex) -> Row | undefined</name>
      <fsummary>Get a row from the table.</fsummary>
      <type>
        <v>Row = {Val1, Val2, ..., ValN}</v>
        <v>Val1 = Val2 = ... = ValN = term()</v>
      </type>
      <desc>
        <p><c>Row</c> is a tuple with values for all columns,
          including the index columns.</p>
      </desc>
    </func>
  </funcs>

  <section>
    <title>See Also</title>
    <p><seealso marker="snmp_generic"><c>snmp_generic(3)</c></seealso>,
      <seealso marker="stdlib:dets"><c>stdlib:dets(3)</c></seealso>,
      <seealso marker="stdlib:ets"><c>stdlib:ets(3)</c></seealso></p>
  </section>
  
</erlref>

